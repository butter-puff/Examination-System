a5380ee
Analysis of Algorithms

2efcde9
What is the purpose of analyzing algorithms?
option: To determine the number of programming languages that can execute an algorithm
option dabfac4: To evaluate the efficiency and performance of algorithms
option: To validate the correctness of algorithms
option: To optimize the code implementation of algorithms

2efcde9
Which of the following measures is commonly used to analyze the efficiency of an algorithm?
option dabfac4: Time complexity
option: Syntax complexity
option: Output complexity
option: Structural complexity

2efcde9
Which notation is commonly used to represent the time complexity of an algorithm in the worst-case scenario?
option: O(n)
option: Ω(n)
option dabfac4: Big O notation (O)
option: Theta notation (Θ)

b94d27b
An algorithm with a time complexity of O(1) has a constant running time regardless of the input size.
option: True
option dabfac4: False

b94d27b
Asymptotic analysis allows us to analyze the performance of an algorithm for large input sizes.
option dabfac4: False
option: True

b94d27b
The best-case time complexity of an algorithm represents the scenario when the algorithm performs optimally.
option: True
option dabfac4: False

88f7ace
Explain the concept of time complexity and its significance in analyzing algorithms. Discuss the difference between best-case, worst-case, and average-case time complexity.
88f7ace
Discuss the advantages and limitations of using an array-based implementation of a stack compared to a linked list-based implementation. Provide examples to illustrate your points.

a5380ee
Aggregation

2efcde9
Aggregation is a form of relationship between two classes where one class:
option: Inherits from the other class
option dabfac4: Contains an instance of the other class
option: Has a parent-child relationship with the other class
option: Shares static members with the other class

2efcde9
Which of the following statements best describes the relationship between the aggregated class and the containing class?
option: The aggregated class is a specialized form of the containing class.
option dabfac4: The aggregated class is a part/component of the containing class.
option: The aggregated class is a subclass of the containing class.
option: The aggregated class is an interface implemented by the containing class.

2efcde9
Aggregation represents a(n) _________ relationship between classes.
option: Inheritance
option: Composition
option dabfac4: Association
option: Encapsulation

b94d27b
In an aggregation relationship, the lifetime of the aggregated object is independent of the containing object.
option: True
option dabfac4: False

b94d27b
Aggregation implies a "whole-part" relationship, where the parts can exist independently of the whole.
option dabfac4: True
option: False

b94d27b
Aggregation allows circular references between classes, creating complex dependencies.
option dabfac4: True
option: False

88f7ace
Explain the concept of aggregation and its purpose in object-oriented programming. Provide an example to illustrate your explanation.

88f7ace
Compare and contrast aggregation with composition. Discuss situations in which you would choose one over the other, and explain your reasoning.

a5380ee
Composition

2efcde9
Composition is a form of relationship between two classes where one class
option: Inherits from the other class
option dabfac4: Contains an instance of the other class
option: Has a parent
option: Doesn't inherit

2efcde9
Which of the following is NOT a valid C++ variable name?
option: Arrays can store elements of different data types.
option: The size of an array can be changed after it is declared.
option dabfac4: Arrays are always passed to functions by value.
option: Arrays automatically adjust their size to accommodate additional elements.

2efcde9
Which of the following best defines an array?
option: An ordered collection of elements of different data types
option: A collection of unordered key-value pairs
option dabfac4: A data structure that stores elements of the same data type with a fixed size
option: A data type used to store characters only

b94d27b
In C++, the size of a character variable is always 1 byte.
option dabfac4: True
option: False

b94d27b
In C++, the operator ++ can be used with both integer and floating-point data types.
option dabfac4: True
option: False

b94d27b
The index value of the last element in an array of size N is N-1? 
option dabfac4: True
option: False

88f7ace
Explain the concept of "array index out of bounds" error and how it can occur when working with arrays.

88f7ace
Discuss the advantages and limitations of using arrays as a data structure in programming